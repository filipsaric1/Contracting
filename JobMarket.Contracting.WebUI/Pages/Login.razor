@page "/auth/login"

@inject AppState _appState
@inject NavigationManager _uriHelper 

<h1 class="text-center">Login</h1>
<div class="container">
    <div class="row">
        <div class="col-md-4 offset-md-4">
            <div class="editor">
                @if (ShowLoginFailed)
                {
                    <div class="alert alert-danger">
                        Login attempt failed.
                    </div>
                }
                <EditForm Model="user" OnValidSubmit="LoginUser">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <InputText type="text" @bind-Value=@user.Email placeholder="E-mail" class="form-control" />
                        <ValidationMessage For="() => user.Email" />
                    </div>
                    <div class="form-group">
                        <InputText type="password" @bind-Value=@user.Password placeholder="Password" class="form-control" />
                        <ValidationMessage For="() => user.Password" />
                    </div>
                    <div class="form-group">
                        <button class="btn btn-primary btn-block" type="submit">Login</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    LoginDto user = new LoginDto();
    bool ShowLoginFailed;

    protected async Task LoginUser()
    {
        await _appState.Login(user);

        if (_appState.IsLoggedIn())
        {
            _uriHelper.NavigateTo("/", true);
        }
        else
        {
            ShowLoginFailed = true;
        }
    }
}